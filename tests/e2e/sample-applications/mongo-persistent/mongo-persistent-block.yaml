apiVersion: v1
kind: List
items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: mongo
      namespace: mongo-persistent
      labels:
        e2e-app: "true"
    spec:
      selector:
        matchLabels:
          app: mongo
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            e2e-app: "true"
            app: mongo
        spec:
          serviceAccountName: mongo-persistent-sa
          securityContext:
            runAsUser: 0  
          # Used to format the block device (put filesystem on it).
          # This allows Mongo to use the filesystem which lives on block device.
          initContainers:
            - image: docker.io/library/mongo:latest
              securityContext:
                privileged: true
              name: setup-block-device
              command:
                - "sh"
                - "-c"
                - |
                  DEVICE="/dev/xvdx"
                  MOUNT_POINT="/data/db"
                  if [ ! -e $DEVICE ]; then
                    echo "$DEVICE does not exist."
                    exit 1
                  fi
                  if dumpe2fs -h $DEVICE 2>/dev/null; then
                    echo "Filesystem already exists on $DEVICE"
                  else
                    echo "Formatting $DEVICE"
                    mkfs.ext4 $DEVICE
                  fi
                  mkdir -p $MOUNT_POINT
                  echo "Mounting $DEVICE in the $MOUNT_POINT"
                  mount $DEVICE $MOUNT_POINT
                  echo $(date +%s) > $MOUNT_POINT/format_timestamp
                  echo "Recorded timestamp: $(cat $MOUNT_POINT/format_timestamp)"
                  umount $MOUNT_POINT
              volumeDevices:
                - name: block-volume-pv
                  devicePath: /dev/xvdx
          containers:
            - image: docker.io/library/mongo:latest
              name: mongo
              securityContext:
                privileged: true
              env:
                - name: MONGO_INITDB_ROOT_USERNAME
                  value: changeme
                - name: MONGO_INITDB_ROOT_PASSWORD
                  value: changeme
                - name: MONGO_INITDB_DATABASE
                  value: todolist
              ports:
                - containerPort: 27017
                  name: mongo
              resources:
                limits:
                  memory: 512Mi
              command:
                - "sh"
                - "-c"
                - |
                  DEVICE="/dev/xvdx"
                  MOUNT_POINT="/data/db"
                  mkdir -p $MOUNT_POINT
                  mount $DEVICE $MOUNT_POINT
                  docker-entrypoint.sh mongod --auth --bind_ip_all --dbpath $MOUNT_POINT
              volumeDevices:
                - name:  block-volume-pv
                  devicePath: /dev/xvdx
              livenessProbe:
                tcpSocket:
                  port: mongo
                initialDelaySeconds: 5
                periodSeconds: 10
              startupProbe:
                exec:
                  command:
                  - mongosh
                  - admin
                  - -u $(MONGO_INITDB_ROOT_USERNAME)
                  - -p $(MONGO_INITDB_ROOT_PASSWORD)
                  - --eval 'printjson(db.getCollectionNames())'
                initialDelaySeconds: 5
                periodSeconds: 30
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 40 # 40x30sec before restart pod
              restartPolicy: Always
          volumes:
          - name: block-volume-pv
            persistentVolumeClaim:
              claimName: mongo